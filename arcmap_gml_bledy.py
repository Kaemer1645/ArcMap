# -*- coding: utf-8 -*-
"""ArcMap_GML_Bledy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uKcUynUOYNUV9sDi86MEF0wLG2zBrkcw
"""

# -*- coding: utf-8 -*-
#/\ -- ustawienie kodowania na utf-8
#import bibliotek
import arcpy
import math
import os


arcpy.env.overwriteOutput = True

#skrypt odczytu i zapisu
def odczyt ():
    try:
        arcpy.AddMessage( "Poczatek pracy narzedzia" )
        #pobranie sciezki pliku shape
        linia = arcpy.GetParameterAsText(0)
        #ustalenie sciezki zapisu pliku tekstowego
        wyjscie = arcpy.GetParameterAsText(1)
        #kursor, ktory bedzie odczytywal dane z pliku shape
        kursor_czytania = arcpy.da.SearchCursor(linia, ["SHAPE@"])
        #sciezka gdzie bedzie zapisywany plik wynikowy zawierajacy bledy
        wyjscie2 = arcpy.GetParameterAsText(2)
        #ustalenie klasy pliku wynikowego jako punktowa
        arcpy.CreateFeatureclass_management(os.path.dirname(wyjscie2), os.path.basename(wyjscie2), "POINT")
        #utworzenie kursora, ktory odszuka w tabeli atrybutow pliku wejsciowego kolumne pod nazwa gml_id
        cur_gml = arcpy.da.SearchCursor(linia,field_names="gml_id")
        #utworzenie kolumn w tabeli atrybutow pliku wynikowego
        arcpy.AddField_management(wyjscie2, "Odleglosc", "TEXT", 30)
        arcpy.AddField_management(wyjscie2, "ID_", "TEXT", 30)
        arcpy.AddField_management(wyjscie2, "gml_id", "TEXT", 30)
        #przypisanie kolumn utworzonych powyzej do pliku wyjsciowego
        cur = arcpy.da.InsertCursor(wyjscie2, ["SHAPE@", "Odleglosc","ID_","gml_id"])
        #stworzenie pustych list do przypisania danych
        lista = []
        mniejsze=[]
        gmly=[]
        #przypisanie do listy numeru oraz wspolrzednej x,y wierzcholka pochodzacych z pliku wejsciowego w oparciu o utworzona funkcje #czytaj2
        for row_czy in kursor_czytania:
            lista2 = czytaj2(row_czy[0])
            lista.append( lista2 )
        #przypisanie danych z pliku wejsciowego do listy gmly, posluzy to do przypisania gml_id do danego wierzcholka
        for rowki in cur_gml:
            gmly.append(rowki)
        #utworzenie pliku do zapisu wspolrzednych wierzcholkow
        zapis = open(wyjscie, "w")
        #wypisanie wszystkich sasiadujacych ze soba wierzcholkow oraz obliczenie pomiedzy nimi odleglosci
        ilosc_obiektow=[]
        numer_obiektu=0
        ilosc_wierzcholkow=[]
        bledy_w_linii=[]
        for linia in lista:
            #iterator wypisujacy ilosc obiektow
            for iksy in range(0,len(linia)-1):
                x1=float(linia[iksy][1])
                y1=float(linia[iksy][2])
                iksy+=1
                x2=float(linia[iksy][1])
                y2=float(linia[iksy][2])
                odl=odleglosc(x1,y1,x2,y2)
                #przypisanie gml_id do danej linii
                gieml=gmly[len(linia)][-1]
                #przypisanie danych do listy mniejsze uwzgledniajac warunek odleglosci miedzy wierzcholkami mniejszej od 50m
                if odl<50:
                    mniejsze.append([x1,y1,x2,y2,odl,gieml])
                    bledy_w_linii.append([gieml])
            #zapisanie wspolrzednych wszystkich wierzcholkow do pliku tekstowego
            ilosc_obiektow.append(numer_obiektu)
            for wierzcholek in linia:
                zapis.writelines(str(numer_obiektu)+' '+ str(round(wierzcholek[1],2)) +' '+ str(round(wierzcholek[2],2)) + "\n")
                ilosc_wierzcholkow.append(numer_obiektu)
            numer_obiektu+=1
        from itertools import groupby
        bledy_zliczanie=[len(list(group)) for key, group in groupby(bledy_w_linii)]
        max = 0
        min = 999999
        for ilosc in bledy_zliczanie:
            if ilosc > max:
                max = ilosc
            if ilosc < min:
                min = ilosc
        #obliczenie wspolrzednych srodka danej prostej i stworzenie z tych wspolrzednych punktow w pliku wyjsciowym - wskaze nam to proste, ktore zawieraja blad dlugosci < 50m
        ID=0
        for wiersz in mniejsze:
            x1,y1,x2,y2,odl,gieml=wiersz
            srodek1=[((x1+x2)/2),((y1+y2)/2)]
            X=float(srodek1[0])
            Y=float(srodek1[1])
            ID+=1
            cur.insertRow([arcpy.Point(X, Y), wiersz[4], ID, wiersz[5]])
        #stworzenie raportu
        rap=('').center(100,'-')
        rap1=('RAPORT_Z_OBLICZEN').center(100,'-')
        rap2=('Ilosc obiektow:'+' '+str(len(ilosc_obiektow))).center(100,'-')
        rap3=('Ilosc wszystkich wierzcholkow'+' '+str(len(ilosc_wierzcholkow))).center(100,'-')
        rap4=('Ilosc potencjalnych bledow'+' '+str(len(mniejsze))).center(100,'-')
        hehe=(float(len(mniejsze))/(float(len(ilosc_wierzcholkow))-float(len(ilosc_obiektow)))*100)
        rap5=('Odsetek potencjalnych bledow do ilosci wszystkich wierzcholkow'+' '+str(round(hehe,2))+'%').center(100,'-')
        hehe2=(float(len(mniejsze))/float(len(ilosc_obiektow)))
        rap6=('Srednia ilosc potencjalnych bledow na obiekt'+' '+str(round(hehe2,2))).center(100, '-')
        rap7=('Maksymalna liczba bledow w obiekcie'+' '+str(max)).center(100,'-')
        rap8=('Srednia ilosc bledow w obiekcie'+' '+str(sum(bledy_zliczanie)/len(bledy_zliczanie))).center(100, '-')
        rap9=('').center(100,'-')
        arcpy.AddWarning(rap+'\n'+rap1+'\n'+rap2+'\n'+rap3+'\n'+rap4+'\n'+rap5+'\n'+rap6+'\n'+rap7+'\n'+rap8+'\n'+rap9)
        #zapis raportu do pliku txt
        raport=arcpy.GetParameterAsText(3)
        rap_zapis = open(raport, "w")
        rap_zapis.writelines(rap+'\n'+rap1+'\n'+rap2+'\n'+rap3+'\n'+rap4+'\n'+rap5+'\n'+rap6+'\n'+rap7+'\n'+rap8+'\n'+rap9)
        zapis.close()
        rap_zapis.close()
    except Exception, err:
            arcpy.AddError(" blad odczyt ")
            arcpy.AddError(sys.exc_traceback.tb_lineno)
            arcpy.AddError(err.message)
    finally:
        pass
#funkcja odczytujaca z pliku wejsciowego (geometrycznego) numer punktu oraz wspolrzedne x i y, nastepnie zwracajaca liste list
def czytaj2(geometria):
    ##-- geometria - obiekt geometryczny ArcGIS
    try:
        lista = []
        i = 0
        partnum = 0
        
        for part in geometria:
            pntcount = 0 
            for pnt in part:
                if pnt:
                    lista.append([pntcount, pnt.X, pnt.Y]) #x i y to metody
                    pntcount += 1 
            partnum +=1
        i +=1
        return lista
        
    except Exception, err:
        arcpy.AddError("blad czytaj2")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    finally:
        del(i, partnum, pntcount, part, pnt, geometria, lista)

#utworzenie funkcji, ktora obliczy odleglosc pomiedzy dwoma wierzcholkami
def odleglosc(x1,y1,x2,y2):
    try:
        d = math.sqrt((x2-x1)**2+(y2-y1)**2)
        return d
    except Exception, err:
        arcpy.AddError("blad odleglosc")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    finally:
        pass

if __name__ == '__main__':
    odczyt ()
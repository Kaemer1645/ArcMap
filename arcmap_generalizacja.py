# -*- coding: utf-8 -*-
"""ArcMap_Generalizacja.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nWEKGqYUcWw6bRwIVHW92LxXsC1Og-dU
"""

# -*- coding: utf-8 -*-
import arcpy
import os
#napisuje wyniki przekształceń \/
arcpy.env.overwriteOutput = True




def generalizacja():
    try:

        wejsciowe=arcpy.GetParameterAsText(0)
        wyjsciowe=arcpy.GetParameterAsText(1)
        kursor_czytania=arcpy.da.SearchCursor(wejsciowe, ["SHAPE@"])
        arcpy.CreateFeatureclass_management(os.path.dirname(wyjsciowe), os.path.basename(wyjsciowe), "POLYLINE")
        arcpy.AddField_management(wyjsciowe, "gml_ID", "TEXT", 30)
        cur = arcpy.da.InsertCursor(wyjsciowe, ["SHAPE@"])

        lista = []
        for row_czy in kursor_czytania:
            lista2 = czytaj2(row_czy[0])
            lista.append(lista2)

        i=0
        trojkaty = []
        doUsuniecia=[]
        for obiekt in lista:
            #arcpy.AddMessage(len(obiekt))
            i+=1
            s=0
            min = 99999999
            trojkaty.append([])

            for x in range(0,len(obiekt)):
                    arcpy.AddWarning(i)
                    #arcpy.AddMessage(obiekt)
                    if s+2<=len(obiekt)-1:
                        #arcpy.AddMessage([obiekt[s], obiekt[s + 1], obiekt[s + 2]])
                        trojkat=([obiekt[s], obiekt[s + 1], obiekt[s + 2]])
                        podstawa1=prosta(obiekt[s][1],obiekt[s][2],obiekt[s+2][1],obiekt[s+2][2])
                        #arcpy.AddMessage(podstawa1)
                        wysokosc=odleglosc_od_prostej(podstawa1[0],podstawa1[1],podstawa1[2],obiekt[s+1][1],obiekt[s+1][2])
                        #arcpy.AddMessage(wysokosc)
                        #arcpy.AddWarning('podstawkaaaaaaaaaaa')
                        podstawa=podstawka(obiekt[s][1],obiekt[s][2],obiekt[s+2][1],obiekt[s+2][2])
                        #arcpy.AddMessage(podstawka(obiekt[s][1],obiekt[s][2],obiekt[s+2][1],obiekt[s+2][2]))
                        #arcpy.AddMessage(podstawka(5,3,9,1))
                        Pole=0.5*wysokosc*podstawa
                        nrwie=obiekt[s+1]
                        if Pole < min:
                            min = Pole
                            arcpy.AddMessage(min)
                            nrmin=nrwie
                            arcpy.AddWarning('nrmin')
                            arcpy.AddMessage(nrmin)
                            doUsuniecia.append(nrmin)
                            trojkaty[-1].append(nrmin)

                        s += 1

                    elif len(obiekt)==3:
                        break
                    else:
                        break



            #trojkaty.append(trojkat)
        #arcpy.AddMessage(trojkaty)
        #arcpy.AddWarning('-----do usuniecia-----')
        #arcpy.AddMessage(doUsuniecia)
        ostateczna=[]
        try:
            for u in range(0,9):
                l3 = [x for x in lista[u] if x not in trojkaty[u]]
                #arcpy.AddMessage(l3)
                ostateczna.append(l3)
        except:
            print("meow")
        #arcpy.AddWarning('ostateczna')
        #arcpy.AddMessage(ostateczna)
        i=-1
        for linia in ostateczna:
            i+=1
            zakres=arcpy.Array()
            for wierzcholek in linia:
                #arcpy.AddMessage(wierzcholek[1])
                zakres.add(arcpy.Point(wierzcholek[1], wierzcholek[2]))
                polilinia = arcpy.Polyline(zakres)
            cur.insertRow([polilinia])


        

    #obsługa wyjątków
    except Exception, err:
        arcpy.AddError("blad nazwa_narzędzia")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    #dekcje końcowe


def prosta(x1,y1,x2,y2):
    try:
        if x1==x2 and y1==y2:
            arcpy.AddWarning('ERROR - PRZERWA W PROSTEJ - ZAPISZ JĄ JAKO OSOBNY OBIEKT')
        else:
            A=(y2-y1)/(x2-x1)
            B=-1
            C=y1-A*x1
            wspolczynniki=[A,B,C]
            return wspolczynniki
    # obsługa wyjątków
    except Exception, err:
        arcpy.AddError("blad prosta")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    finally:
            pass

def podstawka(x1,y1,x2,y2):
    try:
        deltax=x2-x1
        deltay=y2-y1
        odleglosc=sqrt((deltax**2)+(deltay**2))
        return odleglosc

    except Exception, err:
        arcpy.AddError("blad prosta")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    finally:
        pass

def czytaj2(geometria):
    ##-- geometria - obiekt geometryczny ArcGIS
    try:
        lista = []
        i = 0
        partnum = 0
        for part in geometria:
            pntcount = 0
            for pnt in part:
                if pnt:
                    lista.append([pntcount, pnt.X, pnt.Y])  # x i y to metody
                    pntcount += 1
            partnum += 1
        i += 1
        return lista
    # obsługa wyjątków
    except Exception, err:
        arcpy.AddError("blad czytaj2")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    finally:
        del (i, partnum, pntcount, part, pnt, geometria, lista)

#funkcja liczaca odleglosc punktu od prostej
from math import sqrt
def odleglosc_od_prostej(A,B,C,xp,yp):
    try:
        odl_od_prostej=abs(A*xp+B*yp+C)/sqrt(A**2+B**2)
        return odl_od_prostej
    except Exception, err:
        arcpy.AddError("blad prosta")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    finally:
            pass

if __name__ == '__main__':
    generalizacja()
# -*- coding: utf-8 -*-
"""ArcMap_Tworzenie_Obiektow_Shape_Z_Pliku_txt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fk-waHMqsjtF352ecNt3E_yjIT0s2ihx
"""

# -*- coding: utf-8 -*-
import arcpy
import os
#napisuje wyniki przekształceń \/
arcpy.env.overwriteOutput = True

def tworzenie_obiektow_shape():
    try:

        wejsciowy=arcpy.GetParameterAsText(0)
        wyjsciowy=arcpy.GetParameterAsText(1)
        odczyt=open(wejsciowy)
        lista=[]
        for rekord in odczyt.readlines():
            linia=rekord.rstrip()        
            wartosci=linia.split(";") 
            lista.append(wartosci)
        #arcpy.AddMessage(lista)
        CALOSC=[]
        for dada in lista:
            #arcpy.AddMessage(dada[0])
            itemy=[]
            if dada[0][0:4] == "USER":
                HUMMUS=dada[0].split(':')
                uzytkownik = []

                uzytkownik.append(HUMMUS[-1])
                #arcpy.AddMessage(uzytkownik)
            elif dada[0][0:4] =="DATA":
                daty=dada[0].split(":")
                uzytkownik.append(daty[-1])
                #arcpy.AddMessage(uzytkownik)
            elif dada[0][0:4] =="TIME":
                czas=dada[0].split(":")
                uzytkownik.append(czas[-1])
                #arcpy.AddMessage(uzytkownik)
            elif dada[0][0:2] == "Id":
                continue
            else:
                #arcpy.AddMessage("")
                for u in range(0,len(dada[0])):
                    itemy.append(dada[1:len(dada)])
                    #itemy.append([dada[u]])
                    wszystko=uzytkownik+itemy
                    #arcpy.AddMessage(dada[u])
                    CALOSC.append(wszystko)
                    #arcpy.AddMessage(wszystko)
        arcpy.AddMessage(CALOSC)
        arcpy.CreateFeatureclass_management(os.path.dirname(wyjsciowy), os.path.basename(wyjsciowy), "POINT")
        arcpy.AddField_management(wyjsciowy,"Uzytkownik", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"DATA_B", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"TIME_B", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"DATA_E", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"TIME_E", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"GAT", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"WYS", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"X", "TEXT", 30)
        arcpy.AddField_management(wyjsciowy,"Y", "TEXT", 30)
        cur = arcpy.da.InsertCursor(wyjsciowy, ["SHAPE@","Uzytkownik","DATA_B","TIME_B","DATA_E","TIME_E","GAT","WYS","X","Y"])
        #cur = arcpy.da.InsertCursor(wyjsciowy, ["SHAPE@"])
        for uu in range(0,len(CALOSC)):
            #arcpy.AddMessage([float(CALOSC[uu][5][2]),float(CALOSC[uu][5][3])])
            cur.insertRow([arcpy.Point(float(CALOSC[uu][5][2]),float(CALOSC[uu][5][3])),CALOSC[uu][0],CALOSC[uu][1],CALOSC[uu][2],CALOSC[uu][3],CALOSC[uu][4],CALOSC[uu][5][0],CALOSC[uu][5][1],CALOSC[uu][5][2],CALOSC[uu][5][3]])



    #obsługa wyjątków
    except Exception, err:
        arcpy.AddError("blad nazwa_narzędzia")
        arcpy.AddError(sys.exc_traceback.tb_lineno)
        arcpy.AddError(err.message)
    #dekcje końcowe
    finally:
            pass

if __name__ == '__main__':
    tworzenie_obiektow_shape()